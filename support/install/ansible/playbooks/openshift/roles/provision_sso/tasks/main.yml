---
- name: Make sure we go back to default project
  shell: "oc project default"

- name: Check if image streams are available
  shell: "oc describe is rsso74-openshift-rhel8 -n openshift"
  register: imagestream_exists
  when: configure_only == 'false'
  ignore_errors: true

- name: Create the registry-io-auth service account
  shell: 'oc create secret docker-registry registry-io-auth \
  --docker-server=registry.redhat.io \
  --docker-username="{{ registry_io_username }}" \
  --docker-password="{{ registry_io_password }}" -n openshift'
  when: configure_only == 'false'
  ignore_errors: true

- name: Link pull secret to default service account
  shell: 'oc secrets link default registry-io-auth --for=pull -n openshift'
  when: configure_only == 'false'

- name: Link pull secret to default service account builder
  shell: 'oc secrets link builder registry-io-auth -n openshift'
  when: configure_only == 'false'

- name: Create image streams for RH SSO
  shell: "oc create -f https://raw.githubusercontent.com/jboss-container-images/redhat-sso-7-openshift-image/{{ sso_version}}-dev/templates/{{sso_version}}-image-stream.json -n openshift"
  when: configure_only == 'false' and imagestream_exists.failed
  ignore_errors: true

- name: Create secrets for RH SSO
  shell: "oc create -f https://raw.githubusercontent.com/jboss-openshift/application-templates/ose-v1.4.9/secrets/sso-app-secret.json -n {{ sso_project }}"
  when: configure_only == 'false'

- name: Create service account for clustering
  shell: "oc create sa sso-service-account -n {{ sso_project }}"
  when: configure_only == 'false'

- name: Add cluster view policy to sa for clustering
  shell: "oc policy add-role-to-user view system:serviceaccount:{{ sso_project }}:sso-service-account -n {{ sso_project }}"
  when: configure_only == 'false'

- name: Create RH SSO apps
  shell: "oc new-app -f https://raw.githubusercontent.com/jboss-container-images/redhat-sso-7-openshift-image/{{ sso_version }}-dev/templates/sso74-postgresql-persistent.json -p HTTPS_NAME=jboss -p HTTPS_PASSWORD=mykeystorepass -p SSO_ADMIN_USERNAME=keyadmin \
  -p SSO_ADMIN_PASSWORD=keypassword -n {{sso_project}}"
  when: configure_only == 'false'

- name: Wait until RH SSO API is available 
  uri: 
    url: https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}
    method: HEAD
    follow_redirects: safe
    validate_certs: no
  register: wait_sso_result
  until: wait_sso_result is succeeded
  ignore_errors: yes
  retries: 10
  delay: 90
  when: create_realms

- name: Get templated realm
  uri:
    url: 'https://raw.githubusercontent.com/jbossdemocentral/3scale-api-workshop/master/support/templates/realm-template.json'
    return_content: yes
  register: get_realm
  when: create_realms

- debug: var=get_realm.content
  when: create_realms

- name: Get SSO token
  shell: "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=keyadmin' -d 'password=keypassword' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- name: Increase Token Lifespan (60mins)
  uri: 
    url: 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/admin/realms/master'
    method: PUT
    body: "{\"realm\":\"master\", \"accessTokenLifespan\":\"3600\"}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ TKN }}"
    return_content: yes
    validate_certs: no
    status_code: 204

- name: Get SSO Token Longer Lifespan
  shell: "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=keyadmin' -d 'password=keypassword' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- debug: var=TKN

- name: Create user realms
  include_tasks: ./create-realm.yml
  with_sequence: start=1 end={{ usersno }} format=user%d
  when: create_realms

- name: Create threescale realm
  include_tasks: ./create-realm.yml
  vars:
    item: threescale
  when: create_realms

- name: Make sure we go back to default project
  shell: "oc project default"
